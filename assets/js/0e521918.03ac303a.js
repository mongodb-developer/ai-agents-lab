"use strict";(self.webpackChunkai_agents_lab=self.webpackChunkai_agents_lab||[]).push([[366],{4367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(4848),r=n(8453);const s={},a="\ud83d\udcd8 Lecture notes",i={id:"adding-memory/lecture-notes",title:"\ud83d\udcd8 Lecture notes",description:"Checkpoints",source:"@site/docs/50-adding-memory/1-lecture-notes.mdx",sourceDirName:"50-adding-memory",slug:"/adding-memory/lecture-notes",permalink:"/ai-agents-lab/docs/adding-memory/lecture-notes",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/ai-agents-lab/blob/main/docs/50-adding-memory/1-lecture-notes.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add Memory to the Agent",permalink:"/ai-agents-lab/docs/category/add-memory-to-the-agent"},next:{title:"\ud83d\udc50 Add memory to the agent",permalink:"/ai-agents-lab/docs/adding-memory/adding-memory"}},d={},c=[{value:"Checkpoints",id:"checkpoints",level:2},{value:"Thread IDs",id:"thread-ids",level:2}];function l(e){const t={h1:"h1",h2:"h2",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"-lecture-notes",children:"\ud83d\udcd8 Lecture notes"})}),"\n",(0,o.jsx)(t.h2,{id:"checkpoints",children:"Checkpoints"}),"\n",(0,o.jsx)(t.p,{children:"Checkpoints in LangGraph are a snapshot of the graph state. This is how AI applications built using LangGraph persist short-term and long-term memory."}),"\n",(0,o.jsx)(t.h2,{id:"thread-ids",children:"Thread IDs"}),"\n",(0,o.jsx)(t.p,{children:"Thread IDs are unique IDs assigned to memory checkpoints in LangGraph, allowing it to distinguish between conversation threads, facilitate human-in-the loop workflows and allow users to review and debug graph executions."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(6540);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);