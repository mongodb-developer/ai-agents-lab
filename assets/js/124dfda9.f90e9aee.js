"use strict";(self.webpackChunkai_agents_lab=self.webpackChunkai_agents_lab||[]).push([[586],{6243:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=n(4848),o=n(8453);const s={},r="\ud83e\uddb9 Create a custom agent without using abstractions",i={id:"create-agents/agent-without-abstraction",title:"\ud83e\uddb9 Create a custom agent without using abstractions",description:"The createtoolcalling_agent constructor in LangChain makes it easy to create tool-calling agents by abstracting away the individual steps involved in creating the agent.",source:"@site/docs/70-create-agents/5-agent-without-abstraction.mdx",sourceDirName:"70-create-agents",slug:"/create-agents/agent-without-abstraction",permalink:"/ai-agents-lab/docs/create-agents/agent-without-abstraction",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/ai-agents-lab/blob/main/docs/70-create-agents/5-agent-without-abstraction.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83e\uddb9 Chain of Thought (CoT) prompting",permalink:"/ai-agents-lab/docs/create-agents/cot-prompting"},next:{title:"Add Memory to Agents",permalink:"/ai-agents-lab/docs/category/add-memory-to-agents"}},c={},l=[];function g(t){const e={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...t.components},{Details:n}=e;return n||function(t,e){throw new Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"-create-a-custom-agent-without-using-abstractions",children:"\ud83e\uddb9 Create a custom agent without using abstractions"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"create_tool_calling_agent"})," constructor in LangChain makes it easy to create tool-calling agents by abstracting away the individual steps involved in creating the agent."]}),"\n",(0,a.jsxs)(e.p,{children:["As a challenge, try creating a tool-calling agent without using the ",(0,a.jsx)(e.code,{children:"create_tool_calling_agent"})," constructor."]}),"\n",(0,a.jsxs)(e.p,{children:["To do this, fill in any ",(0,a.jsx)(e.code,{children:"<CODE_BLOCK_N>"})," placeholders and run the cells under the ",(0,a.jsx)(e.strong,{children:"\ud83e\uddb9 Create a custom agent without using abstractions"})," section in the notebook."]}),"\n",(0,a.jsx)(e.p,{children:"The answers for code blocks in this section are as follows:"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"CODE_BLOCK_21"})}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)("div",{children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'prompt = ChatPromptTemplate.from_messages(\n    [\n        ("system", system_message),\n        ("human", "{input}"),\n        MessagesPlaceholder("agent_scratchpad"),\n    ]\n)\n\nllm_with_tools = llm.bind_tools(tools)\n\nagent = (\n    RunnablePassthrough.assign(\n        agent_scratchpad=lambda x: format_to_tool_messages(x["intermediate_steps"])\n    )\n    | prompt\n    | llm_with_tools\n    | ToolsAgentOutputParser()\n)\n\nagent_executor = AgentExecutor(\n    agent=agent, tools=tools, verbose=True, handle_parsing_errors=True\n)\n'})})})]})]})}function d(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(g,{...t})}):g(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>i});var a=n(6540);const o={},s=a.createContext(o);function r(t){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),a.createElement(s.Provider,{value:e},t.children)}}}]);