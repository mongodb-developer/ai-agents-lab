"use strict";(self.webpackChunkai_agents_lab=self.webpackChunkai_agents_lab||[]).push([[943],{3723:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>r});var n=t(4848),s=t(8453);const a={},i="\ud83d\udcd8 Concepts",l={id:"agent-tools/concepts",title:"\ud83d\udcd8 Concepts",description:"Here is a quick overview of concepts that you will come across in this section of the lab:",source:"@site/docs/40-agent-tools/1-concepts.mdx",sourceDirName:"40-agent-tools",slug:"/agent-tools/concepts",permalink:"/ai-agents-lab/docs/agent-tools/concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/ai-agents-lab/blob/main/docs/40-agent-tools/1-concepts.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create Agent Tools",permalink:"/ai-agents-lab/docs/category/create-agent-tools"},next:{title:"\ud83d\udc50 Import data",permalink:"/ai-agents-lab/docs/agent-tools/import-data"}},c={},r=[{value:"About the data",id:"about-the-data",level:2},{value:"Tool calling",id:"tool-calling",level:2}];function d(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"-concepts",children:"\ud83d\udcd8 Concepts"})}),"\n",(0,n.jsx)(o.p,{children:"Here is a quick overview of concepts that you will come across in this section of the lab:"}),"\n",(0,n.jsx)(o.h2,{id:"about-the-data",children:"About the data"}),"\n",(0,n.jsx)(o.p,{children:"In this lab, we are using a serverless function to import the data required by the agent's tools, into MongoDB. If you want to do this on your own, these datasets are available on Hugging Face:"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsxs)(o.li,{children:["\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.a,{href:"https://huggingface.co/datasets/MongoDB/mongodb-docs",children:"mongodb-docs"}),": Markdown versions of a small subset of MongoDB's technical documentation. This dataset is imported into a collection called ",(0,n.jsx)(o.code,{children:"full_docs"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(o.li,{children:["\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.a,{href:"https://huggingface.co/datasets/MongoDB/mongodb-docs-embedded",children:"mongodb-docs-embedded"}),": Chunked and embedded versions of the articles in the ",(0,n.jsx)(o.code,{children:"mongodb-docs"})," dataset. This dataset is imported into a collection called ",(0,n.jsx)(o.code,{children:"chunked_docs"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"To learn more about chunking and embedding, here are some resources from our Developer Center:"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsx)(o.li,{children:(0,n.jsx)(o.a,{href:"https://www.mongodb.com/developer/products/atlas/choosing-chunking-strategy-rag/?utm_campaign=devrel&utm_medium=ai-agents-devday-workshop&utm_term=apoorva.joshi",children:"How to Choose the Right Chunking Strategy for Your LLM Application"})}),"\n",(0,n.jsx)(o.li,{children:(0,n.jsx)(o.a,{href:"https://www.mongodb.com/developer/products/atlas/choose-embedding-model-rag/?utm_campaign=devrel&utm_medium=ai-agents-devday-workshop&utm_term=apoorva.joshi",children:"How to Choose the Best Embedding Model for Your LLM Application"})}),"\n"]}),"\n",(0,n.jsx)(o.h2,{id:"tool-calling",children:"Tool calling"}),"\n",(0,n.jsx)(o.p,{children:"Tool calling, interchangeably called function calling allows an LLM to use external tools such as APIs, databases, specialized machine learning models etc."}),"\n",(0,n.jsx)(o.p,{children:"In AI agents, an LLM can have access to multiple tools. Given a user query, the LLM decides which tool to invoke and the arguments for the tool call. These arguments are used to execute the tool call and the output is returned back to the LLM to inform its next steps."}),"\n",(0,n.jsxs)(o.p,{children:["The easiest way to define tools in LangChain is using the ",(0,n.jsx)(o.code,{children:"@tool"})," decorator. The decorator makes tools out of functions by using the function name as the tool name by default, and the function's docstring as the tool's description. The tool call inturn consists of a tool name, arguments, and an optional identifier."]}),"\n",(0,n.jsx)(o.p,{children:"An example of a tool in LangChain is as follows:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:'@tool("search-tool", return_direct=True)\ndef search(query: str) -> str:\n    """Look up things online."""\n    return "MongoDB"\n'})}),"\n",(0,n.jsx)(o.p,{children:"An example of a tool call is as follows:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:'{\n  "name": "search-tool",\n  "args": {\n    "query": "What is MongoDB?"\n  },\n  "id": "call_H5TttXb423JfoulF1qVfPN3m"\n}\n'})})]})}function h(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>i,x:()=>l});var n=t(6540);const s={},a=n.createContext(s);function i(e){const o=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:o},e.children)}}}]);